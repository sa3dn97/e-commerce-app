{"version":3,"sources":["ng://ngx-bootstrap/accordion/accordion.config.ts","ng://ngx-bootstrap/accordion/accordion.component.ts","ng://ngx-bootstrap/accordion/accordion-group.component.html","ng://ngx-bootstrap/accordion/accordion-group.component.ts","ng://ngx-bootstrap/accordion/accordion.module.ts"],"names":["AccordionConfig","this","closeOthers","isAnimated","t","AccordionComponent","config","groups","Object","assign","prototype","closeOtherPanels","openGroup","forEach","group","isOpen","addGroup","push","removeGroup","index","indexOf","splice","core","i0.ɵɵprojection","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","AccordionPanelComponent","accordion","isOpenChange","EventEmitter","_isOpen","defineProperty","value","_this","Promise","resolve","then","emit","catch","error","console","log","isBs3","ngOnInit","panelClass","ngOnDestroy","toggleOpen","isDisabled","i0.ɵɵlistener","ctx","i0.ɵɵtemplate","i0.ɵɵattribute","AccordionModule","forRoot","ngModule","providers","imports","common","CommonModule","collapse","CollapseModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n@Injectable()\nexport class AccordionConfig {\n  /** Whether the other panels should be closed when a panel is opened */\n  closeOthers: Boolean = false;\n  /** turn on/off animation */\n  isAnimated: Boolean = false;\n}\n","import { Component, Input } from '@angular/core';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { AccordionConfig } from './accordion.config';\n\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\n@Component({\n  selector: 'accordion',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[attr.aria-multiselectable]': 'closeOthers',\n    role: 'tablist',\n    class: 'panel-group',\n    style: 'display: block'\n  }\n})\nexport class AccordionComponent {\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** if `true` expanding one item will close all others */\n  @Input() closeOthers: boolean;\n\n  protected groups: AccordionPanelComponent[] = [];\n\n  constructor(config: AccordionConfig) {\n    Object.assign(this, config);\n  }\n\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.groups.forEach((group: AccordionPanelComponent) => {\n      if (group !== openGroup) {\n        group.isOpen = false;\n      }\n    });\n  }\n\n  addGroup(group: AccordionPanelComponent): void {\n    group.isAnimated = this.isAnimated;\n    this.groups.push(group);\n  }\n\n  removeGroup(group: AccordionPanelComponent): void {\n    const index = this.groups.indexOf(group);\n    if (index !== -1) {\n      this.groups.splice(index, 1);\n    }\n  }\n}\n","<div class=\"panel card\" [ngClass]=\"panelClass\">\n  <div\n    class=\"panel-heading card-header\"\n    role=\"tab\"\n    (click)=\"toggleOpen()\"\n    [ngClass]=\"isDisabled ? 'panel-disabled' : 'panel-enabled'\"\n  >\n    <div class=\"panel-title\">\n      <div role=\"button\" class=\"accordion-toggle\" [attr.aria-expanded]=\"isOpen\">\n        <button class=\"btn btn-link\" *ngIf=\"heading\" [ngClass]=\"{ 'text-muted': isDisabled }\" type=\"button\">\n          {{ heading }}\n        </button>\n        <ng-content select=\"[accordion-heading]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div class=\"panel-collapse collapse\" role=\"tabpanel\" [collapse]=\"!isOpen\" [isAnimated]=\"isAnimated\">\n    <div class=\"panel-body card-block card-body\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionConfig } from './accordion.config';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [AccordionConfig] };\n  }\n}\n"]}