{"version":3,"sources":["ng://ngx-bootstrap/popover/popover.config.ts","ng://ngx-bootstrap/popover/popover-container.component.html","ng://ngx-bootstrap/popover/popover-container.component.ts","ng://ngx-bootstrap/popover/popover.directive.ts","ng://ngx-bootstrap/popover/popover.module.ts"],"names":["PopoverConfig","this","adaptivePosition","placement","triggers","outsideClick","delay","t","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵtextInterpolate","PopoverContainerComponent","config","Object","assign","defineProperty","prototype","isBs3","core","i0.ɵɵelement","i0.ɵɵtemplate","i0.ɵɵprojection","i0.ɵɵproperty","PopoverDirective","_config","_elementRef","_renderer","_viewContainerRef","cis","_positionService","containerClass","_isInited","_popover","createLoader","provide","useValue","onShown","onHidden","window","nativeElement","addEventListener","focus","err","isShown","value","show","hide","_this","popover","_delayTimeoutId","setOptions","modifiers","flip","enabled","preventOverflow","showPopover","undefined","attach","to","container","position","attachment","content","context","popoverContext","title","popoverTitle","calcPosition","deletePositionElement","_componentRef","location","isOpen","cancelDelayedTooltipShowing","_popoverCancelShowFn","_timer_1","timer","subscribe","parseTriggers","forEach","trigger","listen","close","unsubscribe","clearTimeout","toggle","ngOnInit","ngOnDestroy","dispose","ElementRef","Renderer2","ViewContainerRef","componentLoader","ComponentLoaderFactory","positioning","PositioningService","PopoverModule","forRoot","ngModule","providers","type","imports","common","CommonModule","declarations","exports"],"mappings":"0qBAQA,SAAAA,IAGEC,KAAAC,kBAAmB,EAInBD,KAAAE,UAAY,MAKZF,KAAAG,SAAW,QAEXH,KAAAI,cAAe,EAMfJ,KAAAK,MAAQ,4BAnBG,OAAA,IAAAC,GAAAP,4FCRbQ,EAAAA,kBAAAA,EAAAA,KAAAA,GAAuDC,EAAAA,UAAAA,GAAWC,EAAAA,mDAAXC,EAAAA,aAAAA,GAAAC,EAAAA,qBAAAA,EAAAA,iCCgDrD,SAAAC,EAAYC,GACVC,OAAOC,OAAOf,KAAMa,UALtBC,OAAAE,eAAIJ,EAAAK,UAAA,QAAK,KAAT,WACE,OAAOC,EAAAA,4DANE,OAAA,IAAAZ,GAAAM,GAAAO,EAAA,qBAAApB,snBDxCbqB,EAAAA,aAAAA,EAAAA,MAAAA,GACAC,EAAAA,cAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GACAd,EAAAA,kBAAAA,EAAAA,MAAAA,GACEe,EAAAA,gBAAAA,GACFb,EAAAA,yBAHyCC,EAAAA,aAAAA,GAAAa,EAAAA,cAAAA,OAAAA,EAAAA,gqBE8FvC,SAAAC,EACEC,EACQC,EACAC,EACRC,EACAC,EACQC,GAJA9B,KAAA0B,YAAAA,EACA1B,KAAA2B,UAAAA,EAGA3B,KAAA8B,iBAAAA,EA7DD9B,KAAAI,cAAe,EAcfJ,KAAA+B,eAAiB,GAuClB/B,KAAAgC,WAAY,EAUlBhC,KAAKiC,SAAWJ,EACbK,aACCR,EACAE,EACAD,GAEDQ,QAAQ,CAACA,QAASpC,EAAeqC,SAAUX,IAE9CX,OAAOC,OAAOf,KAAMyB,GAEpBzB,KAAKqC,QAAUrC,KAAKiC,SAASI,QAC7BrC,KAAKsC,SAAWtC,KAAKiC,SAASK,SAGR,oBAAXC,QACTb,EAAYc,cAAcC,iBAAiB,SAAS,WAClD,IACEf,EAAYc,cAAcE,QAC1B,MAAOC,GACP,kBA/DR7B,OAAAE,eACIQ,EAAAP,UAAA,SAAM,KADV,WAEE,OAAOjB,KAAKiC,SAASW,aAGvB,SAAWC,GACLA,EACF7C,KAAK8C,OAEL9C,KAAK+C,wCAgETvB,EAAAP,UAAA6B,KAAA,WAAA,IAAAE,EAAAhD,KACE,IAAIA,KAAKiC,SAASW,SAAY5C,KAAKiD,UAAWjD,KAAKkD,gBAAnD,CAIAlD,KAAK8B,iBAAiBqB,WAAW,CAC/BC,UAAW,CACTC,KAAM,CACJC,QAAStD,KAAKC,kBAEhBsD,gBAAiB,CACfD,QAAStD,KAAKC,qBAKpB,IAAMuD,EAAc,WACdR,EAAKE,kBACPF,EAAKE,qBAAkBO,GAGzBT,EAAKf,SACFyB,OAAO9C,GACP+C,GAAGX,EAAKY,WACRC,SAAS,CAACC,WAAYd,EAAK9C,YAC3B4C,KAAK,CACJiB,QAASf,EAAKC,QACde,QAAShB,EAAKiB,eACd/D,UAAW8C,EAAK9C,UAChBgE,MAAOlB,EAAKmB,aACZpC,eAAgBiB,EAAKjB,iBAGpBiB,EAAK/C,mBACR+C,EAAKlB,iBAAiBsC,eACtBpB,EAAKlB,iBAAiBuC,sBAAsBrB,EAAKf,SAASqC,cAAcC,WAG1EvB,EAAKwB,QAAS,GAGVC,EAA8B,WAC9BzB,EAAK0B,sBACP1B,EAAK0B,wBAIT,GAAI1E,KAAKK,MAAO,CACd,IAAMsE,EAASC,EAAAA,MAAM5E,KAAKK,OAAOwE,WAAU,WACzCrB,IACAiB,OAGEzE,KAAKG,UACP2E,EAAAA,cAAc9E,KAAKG,UAChB4E,SAAQ,SAACC,GACRhC,EAAK0B,qBAAuB1B,EAAKrB,UAAUsD,OACzCjC,EAAKtB,YAAYc,cACjBwC,EAAQE,OACR,WACEP,EAAOQ,cACPV,eAMVjB,MAQJhC,EAAAP,UAAA8B,KAAA,WACM/C,KAAKkD,kBACPkC,aAAapF,KAAKkD,iBAClBlD,KAAKkD,qBAAkBO,GAGrBzD,KAAKwE,SACPxE,KAAKiC,SAASc,OACd/C,KAAKwE,QAAS,IAQlBhD,EAAAP,UAAAoE,OAAA,WACE,GAAIrF,KAAKwE,OACP,OAAOxE,KAAK+C,OAGd/C,KAAK8C,QAGPtB,EAAAP,UAAAqE,SAAA,WAAA,IAAAtC,EAAAhD,KAIMA,KAAKgC,YAGThC,KAAKgC,WAAY,EAEjBhC,KAAKiC,SAASgD,OAAO,CACnB9E,SAAUH,KAAKG,SACfC,aAAcJ,KAAKI,aACnB0C,KAAM,WAAM,OAAAE,EAAKF,YAIrBtB,EAAAP,UAAAsE,YAAA,WACEvF,KAAKiC,SAASuD,8BAzOL,OAAA,IAAAlF,GAAAkB,GAAAL,EAAA,qBAAApB,GAAAoB,EAAA,qBAAAA,EAAAsE,YAAAtE,EAAA,qBAAAA,EAAAuE,WAAAvE,EAAA,qBAAAA,EAAAwE,kBAAAxE,EAAA,qBAAAyE,EAAAC,wBAAA1E,EAAA,qBAAA2E,EAAAC,2cCNb,SAAAC,YAOSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACpG,EAAe8F,EAAAA,uBAAwBE,EAAAA,oDAJ/BK,KAAAJ,sDAAb,OAAA,IAAA1F,GAAA0F,IALDK,QAAA,CAAA,CAAAC,EAAAC,0FAKCP,EAAa,CAAAQ,aAAA,CAJThF,EAAkBZ,GAAyByF,QAAA,CADhDE,EAAAA,cAAYE,QAAA,CAEZjF","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the Popover directive.\n * You can inject this service, typically in your root component, and customize\n * the values of its properties in order to provide default values for all the\n * popovers used in the application.\n */\n@Injectable()\nexport class PopoverConfig {\n  /** sets disable adaptive position */\n  adaptivePosition = true;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\n   */\n  placement = 'top';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  triggers = 'click';\n\n  outsideClick = false;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   */\n  container: string;\n  /** delay before showing the tooltip */\n  delay = 0;\n}\n","<div class=\"popover-arrow arrow\"></div>\n<h3 class=\"popover-title popover-header\" *ngIf=\"title\">{{ title }}</h3>\n<div class=\"popover-content popover-body\">\n  <ng-content></ng-content>\n</div>\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'popover-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[class]':\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\n    '[class.show]': '!isBs3',\n    '[class.bs3]': 'isBs3',\n    role: 'tooltip',\n    style: 'display:block;'\n  },\n  styles: [\n    `\n    :host.bs3.popover-top {\n      margin-bottom: 10px;\n    }\n    :host.bs3.popover.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.popover.top {\n      margin-bottom: 10px;\n    }\n    :host.popover.bottom>.arrow {\n      margin-left: -4px;\n    }\n    :host.bs3.bs-popover-left {\n      margin-right: .5rem;\n    }\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\n      margin: .3rem 0;\n    }\n    `\n  ],\n  templateUrl: './popover-container.component.html'\n})\nexport class PopoverContainerComponent {\n  @Input() placement: string;\n  @Input() title: string;\n  containerClass: string;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  constructor(config: PopoverConfig) {\n    Object.assign(this, config);\n  }\n}\n","import {\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\n  Renderer2, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { timer } from 'rxjs';\nimport { parseTriggers, Trigger } from 'ngx-bootstrap/utils';\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\nexport class PopoverDirective implements OnInit, OnDestroy {\n  /** sets disable adaptive position */\n  @Input() adaptivePosition: boolean;\n  /**\n   * Content to be displayed as popover.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popover: string | TemplateRef<any>;\n  /**\n   * Context to be used if popover is a template.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popoverContext: any;\n  /**\n   * Title of a popover.\n   */\n  @Input() popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto' | 'top left' | 'top right' |\n    'right top' | 'right bottom' | 'bottom right' | 'bottom left' | 'left bottom' | 'left top';\n  /**\n   * Close popover on outside click\n   */\n  @Input() outsideClick = false;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   */\n  @Input() container: string;\n\n  /**\n   * Css class for popover container\n   */\n  @Input() containerClass = '';\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._popover.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Delay before showing the tooltip\n   */\n  @Input() delay: number;\n\n  /**\n   * Emits an event when the popover is shown\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onHidden: EventEmitter<any>;\n\n  protected _popoverCancelShowFn: Function;\n\n  protected _delayTimeoutId: number | any;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n  private _isInited = false;\n\n  constructor(\n    _config: PopoverConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    private _positionService: PositioningService\n  ) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(\n        _elementRef,\n        _viewContainerRef,\n        _renderer\n      )\n      .provide({provide: PopoverConfig, useValue: _config});\n\n    Object.assign(this, _config);\n\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n\n    // fix: no focus on button on Mac OS #1795\n    if (typeof window !== 'undefined') {\n      _elementRef.nativeElement.addEventListener('click', function () {\n        try {\n          _elementRef.nativeElement.focus();\n        } catch (err) {\n          return;\n        }\n      });\n    }\n  }\n\n  /**\n   * Opens an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  show(): void {\n    if (this._popover.isShown || !this.popover || this._delayTimeoutId) {\n      return;\n    }\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: this.adaptivePosition\n        },\n        preventOverflow: {\n          enabled: this.adaptivePosition\n        }\n      }\n    });\n\n    const showPopover = () => {\n      if (this._delayTimeoutId) {\n        this._delayTimeoutId = undefined;\n      }\n\n      this._popover\n        .attach(PopoverContainerComponent)\n        .to(this.container)\n        .position({attachment: this.placement})\n        .show({\n          content: this.popover,\n          context: this.popoverContext,\n          placement: this.placement,\n          title: this.popoverTitle,\n          containerClass: this.containerClass\n        });\n\n      if (!this.adaptivePosition) {\n        this._positionService.calcPosition();\n        this._positionService.deletePositionElement(this._popover._componentRef.location);\n      }\n\n      this.isOpen = true;\n    };\n\n    const cancelDelayedTooltipShowing = () => {\n      if (this._popoverCancelShowFn) {\n        this._popoverCancelShowFn();\n      }\n    };\n\n    if (this.delay) {\n      const _timer = timer(this.delay).subscribe(() => {\n        showPopover();\n        cancelDelayedTooltipShowing();\n      });\n\n      if (this.triggers) {\n        parseTriggers(this.triggers)\n          .forEach((trigger: Trigger) => {\n            this._popoverCancelShowFn = this._renderer.listen(\n              this._elementRef.nativeElement,\n              trigger.close,\n              () => {\n                _timer.unsubscribe();\n                cancelDelayedTooltipShowing();\n              }\n            );\n          });\n      }\n    } else {\n      showPopover();\n    }\n  }\n\n  /**\n   * Closes an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  hide(): void {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  ngOnInit(): void {\n    // fix: seems there are an issue with `routerLinkActive`\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n    if (this._isInited) {\n      return;\n    }\n    this._isInited = true;\n\n    this._popover.listen({\n      triggers: this.triggers,\n      outsideClick: this.outsideClick,\n      show: () => this.show()\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._popover.dispose();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { PopoverConfig } from './popover.config';\nimport { PopoverDirective } from './popover.directive';\nimport { PopoverContainerComponent } from './popover-container.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PopoverDirective, PopoverContainerComponent],\n  exports: [PopoverDirective],\n  entryComponents: [PopoverContainerComponent]\n})\nexport class PopoverModule {\n  static forRoot(): ModuleWithProviders<PopoverModule> {\n    return {\n      ngModule: PopoverModule,\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\n    };\n  }\n}\n"]}