{"version":3,"sources":["ng://ngx-bootstrap/tabs/ng-transclude.directive.ts","ng://ngx-bootstrap/tabs/tabset.config.ts","ng://ngx-bootstrap/tabs/tabset.component.html","ng://ngx-bootstrap/tabs/tabset.component.ts","ng://ngx-bootstrap/tabs/tab.directive.ts","ng://ngx-bootstrap/tabs/tab-heading.directive.ts","ng://ngx-bootstrap/tabs/tabs.module.ts"],"names":["NgTranscludeDirective","viewRef","this","Object","defineProperty","prototype","_ngTransclude","templateRef","createEmbeddedView","t","core","ViewContainerRef","TabsetConfig","type","isKeysAllowed","ariaLabel","token","factory","ɵfac","i0.ɵɵelementStart","i0.ɵɵlistener","$event","preventDefault","ctx_r14","removeTab","tabz_r11","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵtemplate","i0.ɵɵclassProp","disabled","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵattribute","active","id","i0.ɵɵtextInterpolate","TabsetComponent","config","renderer","elementRef","clazz","tabs","classMap","assign","_vertical","value","setClassMap","_justified","_type","_isKeysAllowed","ngOnDestroy","isDestroyed","addTab","tab","push","length","options","reselect","emit","index","indexOf","hasAvailableTabs","newActiveIndex","getClosestTabIndex","removed","splice","nativeElement","parentNode","removeChild","keyNavActions","event","list","Array","from","querySelectorAll","keyCode","key","click","removable","focus","lastTab","shift","i","classList","contains","firstTab","previousTab","nextTab","tabsLength","step","prevIndex","nextIndex","_a","nav-stacked","vertical","flex-column","nav-justified","justified","Renderer2","ElementRef","i0.ɵɵprojection","TabDirective","tabset","selectTab","EventEmitter","deselect","addClass","role","_customClass","customClass","_this","split","forEach","cssClass","removeClass","trim","_active","ngOnInit","TabHeadingDirective","headingRef","TemplateRef","selectors","TabsModule","forRoot","ngModule","providers","imports","common","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngTransclude]'\n})\nexport class NgTranscludeDirective {\n  viewRef: ViewContainerRef;\n\n  protected _viewRef: ViewContainerRef;\n  /* tslint:disable-next-line:no-any */\n  protected _ngTransclude: TemplateRef<any>;\n\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set ngTransclude(templateRef: TemplateRef<any>) {\n    this._ngTransclude = templateRef;\n    if (templateRef) {\n      this.viewRef.createEmbeddedView(templateRef);\n    }\n  }\n\n  /* tslint:disable-next-line:no-any */\n  get ngTransclude(): TemplateRef<any> {\n    return this._ngTransclude;\n  }\n\n  constructor(viewRef: ViewContainerRef) {\n    this.viewRef = viewRef;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TabsetConfig {\n  /** provides default navigation context class: 'tabs' or 'pills' */\n  type = 'tabs';\n  /** provides possibility to set keyNavigations enable or disable, by default is enable */\n  isKeysAllowed = true;\n  /** aria label for tab list */\n  ariaLabel = 'Tabs';\n}\n","<ul class=\"nav\" [ngClass]=\"classMap\"\n    (click)=\"$event.preventDefault()\"\n    [attr.aria-label]=\"ariaLabel\"\n    role=\"tablist\">\n  <li *ngFor=\"let tabz of tabs; let i = index\" [ngClass]=\"['nav-item', tabz.customClass || '']\"\n      [class.active]=\"tabz.active\" [class.disabled]=\"tabz.disabled\" (keydown)=\"keyNavActions($event, i)\">\n    <a href=\"javascript:void(0);\" class=\"nav-link\" role=\"tab\"\n       [attr.aria-controls]=\"tabz.id ? tabz.id : ''\"\n       [attr.aria-selected]=\"!!tabz.active\"\n       [attr.id]=\"tabz.id ? tabz.id + '-link' : ''\"\n       [class.active]=\"tabz.active\" [class.disabled]=\"tabz.disabled\"\n       (click)=\"tabz.active = true\">\n      <span [ngTransclude]=\"tabz.headingRef\">{{ tabz.heading }}</span>\n      <span *ngIf=\"tabz.removable\" (click)=\"$event.preventDefault(); removeTab(tabz);\" class=\"bs-remove-tab\"> &#10060;</span>\n    </a>\n  </li>\n</ul>\n<div class=\"tab-content\">\n  <ng-content></ng-content>\n</div>\n","import { Component, HostBinding, Input, OnDestroy, Renderer2, ElementRef } from '@angular/core';\n\nimport { TabDirective } from './tab.directive';\nimport { TabsetConfig } from './tabset.config';\n// todo: add active event to tab\n// todo: fix? mixing static and dynamic tabs position tabs in order of creation\n@Component({\n  selector: 'tabset',\n  templateUrl: './tabset.component.html',\n  styleUrls: ['./tabs.scss']\n})\nexport class TabsetComponent implements OnDestroy {\n  /** if true tabs will be placed vertically */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n  set vertical(value: boolean) {\n    this._vertical = value;\n    this.setClassMap();\n  }\n\n  /** if true tabs fill the container and have a consistent width */\n  @Input()\n  get justified(): boolean {\n    return this._justified;\n  }\n  set justified(value: boolean) {\n    this._justified = value;\n    this.setClassMap();\n  }\n\n  /** navigation context class: 'tabs' or 'pills' */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    this._type = value;\n    this.setClassMap();\n  }\n\n  get isKeysAllowed(): boolean {\n    return this._isKeysAllowed;\n  }\n\n  set isKeysAllowed(value: boolean) {\n    this._isKeysAllowed = value;\n  }\n\n\n  @HostBinding('class.tab-container') clazz = true;\n\n  tabs: TabDirective[] = [];\n  classMap: { [key: string]: boolean } = {};\n\n  /** aria label for tab list */\n  ariaLabel: string;\n\n  protected isDestroyed: boolean;\n  protected _vertical: boolean;\n  protected _justified: boolean;\n  protected _type: string;\n  protected _isKeysAllowed: boolean;\n\n  constructor(\n    config: TabsetConfig,\n    private renderer: Renderer2,\n    private elementRef: ElementRef\n  ) {\n    Object.assign(this, config);\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroyed = true;\n  }\n\n  addTab(tab: TabDirective): void {\n    this.tabs.push(tab);\n    tab.active = this.tabs.length === 1 && typeof tab.active === 'undefined';\n  }\n\n  removeTab(\n    tab: TabDirective,\n    options = { reselect: true, emit: true }\n  ): void {\n    const index = this.tabs.indexOf(tab);\n    if (index === -1 || this.isDestroyed) {\n      return;\n    }\n    // Select a new tab if the tab to be removed is selected and not destroyed\n    if (options.reselect && tab.active && this.hasAvailableTabs(index)) {\n      const newActiveIndex = this.getClosestTabIndex(index);\n      this.tabs[newActiveIndex].active = true;\n    }\n    if (options.emit) {\n      tab.removed.emit(tab);\n    }\n    this.tabs.splice(index, 1);\n    if (tab.elementRef.nativeElement.parentNode) {\n      this.renderer.removeChild(\n        tab.elementRef.nativeElement.parentNode,\n        tab.elementRef.nativeElement\n      );\n    }\n  }\n\n  /* tslint:disable-next-line: cyclomatic-complexity */\n  keyNavActions(event: KeyboardEvent, index: number) {\n    if (!this.isKeysAllowed) {\n      return;\n    }\n    const list: HTMLElement[] = Array.from(this.elementRef.nativeElement.querySelectorAll('.nav-link'));\n    // const activeElList = list.filter((el: HTMLElement) => !el.classList.contains('disabled'));\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 13 || event.key === 'Enter' || event.keyCode === 32 || event.key === 'Space') {\n      event.preventDefault();\n      const currentTab = list[(index) % list.length];\n      currentTab.click();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 39 || event.key === 'RightArrow') {\n      let nextTab: any;\n      let shift = 1;\n\n      do {\n        nextTab = list[(index + shift) % list.length];\n\n        shift++;\n      } while (nextTab.classList.contains('disabled'));\n\n      nextTab.focus();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 37 || event.key === 'LeftArrow') {\n      let previousTab: any;\n      let shift = 1;\n      let i = index;\n\n      do {\n        if ((i - shift) < 0) {\n          i = list.length - 1;\n          previousTab = list[i];\n          shift = 0;\n        } else {\n          previousTab = list[i - shift];\n        }\n\n        shift++;\n      } while (previousTab.classList.contains('disabled'));\n\n      previousTab.focus();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 36 || event.key === 'Home') {\n      event.preventDefault();\n\n      let firstTab: any;\n      let shift = 0;\n\n      do {\n        firstTab = list[shift % list.length];\n\n        shift++;\n      } while (firstTab.classList.contains('disabled'));\n\n      firstTab.focus();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 35 || event.key === 'End') {\n      event.preventDefault();\n\n      let lastTab: any;\n      let shift = 1;\n      let i = index;\n\n      do {\n        if ((i - shift) < 0) {\n          i = list.length - 1;\n          lastTab = list[i];\n          shift = 0;\n        } else {\n          lastTab = list[i - shift];\n        }\n\n        shift++;\n      } while (lastTab.classList.contains('disabled'));\n\n      lastTab.focus();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 46 || event.key === 'Delete') {\n      if (this.tabs[index].removable) {\n        this.removeTab(this.tabs[index]);\n\n        if (list[index + 1]) {\n          list[(index + 1) % list.length].focus();\n\n          return;\n        }\n\n        if (list[list.length - 1]) {\n          list[0].focus();\n        }\n      }\n    }\n  }\n\n  protected getClosestTabIndex(index: number): number {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return -1;\n    }\n\n    for (let step = 1; step <= tabsLength; step += 1) {\n      const prevIndex = index - step;\n      const nextIndex = index + step;\n      if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {\n        return prevIndex;\n      }\n      if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {\n        return nextIndex;\n      }\n    }\n\n    return -1;\n  }\n\n  protected hasAvailableTabs(index: number): boolean {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return false;\n    }\n\n    for (let i = 0; i < tabsLength; i += 1) {\n      if (!this.tabs[i].disabled && i !== index) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected setClassMap(): void {\n    this.classMap = {\n      'nav-stacked': this.vertical,\n      'flex-column': this.vertical,\n      'nav-justified': this.justified,\n      [`nav-${this.type}`]: true\n    };\n  }\n}\n","import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { TabsetComponent } from './tabset.component';\n\n@Directive({ selector: 'tab, [tab]' })\nexport class TabDirective implements OnInit, OnDestroy {\n  /** tab header text */\n  @Input() heading: string;\n  /** tab id. The same id with suffix '-link' will be added to the corresponding &lt;li&gt; element  */\n  @HostBinding('attr.id')\n  @Input() id: string;\n  /** if true tab can not be activated */\n  @Input() disabled: boolean;\n  /** if true tab can be removable, additional button will appear */\n  @Input() removable: boolean;\n  /** if set, will be added to the tab's class attribute. Multiple classes are supported. */\n  @Input()\n  get customClass(): string {\n    return this._customClass;\n  }\n\n  set customClass(customClass: string) {\n    if (this.customClass) {\n      this.customClass.split(' ').forEach((cssClass: string) => {\n        this.renderer.removeClass(this.elementRef.nativeElement, cssClass);\n      });\n    }\n\n    this._customClass = customClass ? customClass.trim() : null;\n\n    if (this.customClass) {\n      this.customClass.split(' ').forEach((cssClass: string) => {\n        this.renderer.addClass(this.elementRef.nativeElement, cssClass);\n      });\n    }\n  }\n\n  /** tab active state toggle */\n  @HostBinding('class.active')\n  @Input()\n  get active(): boolean {\n    return this._active;\n  }\n\n  set active(active: boolean) {\n    if (this._active === active) {\n      return;\n    }\n    if ((this.disabled && active) || !active) {\n      if (this._active && !active) {\n        this.deselect.emit(this);\n        this._active = active;\n      }\n\n      return;\n    }\n\n    this._active = active;\n    this.selectTab.emit(this);\n    this.tabset.tabs.forEach((tab: TabDirective) => {\n      if (tab !== this) {\n        tab.active = false;\n      }\n    });\n  }\n\n  /** fired when tab became active, $event:Tab equals to selected instance of Tab component */\n  @Output() selectTab: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */\n  @Output() deselect: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired before tab will be removed, $event:Tab equals to instance of removed tab */\n  @Output() removed: EventEmitter<TabDirective> = new EventEmitter();\n\n  @HostBinding('class.tab-pane') addClass = true;\n  @HostBinding('attr.role') role = 'tabpanel';\n  @HostBinding('attr.aria-labelledby') get ariaLabelledby(): string {\n    return this.id ? `${this.id}-link` : '';\n  }\n\n  /* tslint:disable-next-line:no-any */\n  headingRef: TemplateRef<any>;\n  tabset: TabsetComponent;\n  protected _active: boolean;\n  protected _customClass: string;\n\n  constructor(\n    tabset: TabsetComponent,\n    public elementRef: ElementRef,\n    public renderer: Renderer2\n  ) {\n    this.tabset = tabset;\n    this.tabset.addTab(this);\n  }\n\n  ngOnInit(): void {\n    this.removable = this.removable;\n  }\n\n  ngOnDestroy(): void {\n    this.tabset.removeTab(this, { reselect: false, emit: false });\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\nimport { TabDirective } from './tab.directive';\n\n/** Should be used to mark <ng-template> element as a template for tab heading */\n@Directive({ selector: '[tabHeading]' })\nexport class TabHeadingDirective {\n  /* tslint:disable-next-line:no-any */\n  templateRef: TemplateRef<any>;\n\n  /* tslint:disable-next-line:no-any */\n  constructor(templateRef: TemplateRef<any>, tab: TabDirective) {\n    tab.headingRef = templateRef;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { NgTranscludeDirective } from './ng-transclude.directive';\nimport { TabHeadingDirective } from './tab-heading.directive';\nimport { TabDirective } from './tab.directive';\nimport { TabsetComponent } from './tabset.component';\nimport { TabsetConfig } from './tabset.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    NgTranscludeDirective,\n    TabDirective,\n    TabsetComponent,\n    TabHeadingDirective\n  ],\n  exports: [\n    TabDirective,\n    TabsetComponent,\n    TabHeadingDirective,\n    NgTranscludeDirective\n  ]\n})\nexport class TabsModule {\n  static forRoot(): ModuleWithProviders<TabsModule> {\n    return {\n      ngModule: TabsModule,\n      providers: [TabsetConfig]\n    };\n  }\n}\n"]}