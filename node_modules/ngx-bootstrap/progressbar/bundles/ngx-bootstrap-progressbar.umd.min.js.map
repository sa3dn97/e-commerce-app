{"version":3,"sources":["ng://ngx-bootstrap/progressbar/progressbar.config.ts","ng://ngx-bootstrap/progressbar/progressbar.component.html","ng://ngx-bootstrap/progressbar/progressbar.component.ts","ng://ngx-bootstrap/progressbar/bar.component.ts","ng://ngx-bootstrap/progressbar/bar.component.html","ng://ngx-bootstrap/progressbar/progressbar.module.ts"],"names":["ProgressbarConfig","this","animate","max","t","factory","ɵfac","i0.ɵɵelementStart","i0.ɵɵprojection","i0.ɵɵelementEnd","i0.ɵɵproperty","ctx_r4","_value","i0.ɵɵtext","item_r7","value","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵtemplate","ProgressbarComponent","config","isStacked","addClass","bars","_max","Object","assign","defineProperty","prototype","_animate","forEach","b","_striped","striped","Array","isArray","isBs3","v","bar","recalculatePercentage","addBar","push","removeBar","splice","indexOf","core","BarComponent","el","progress","renderer","percent","_type","applyTypeClasses","ngOnInit","ngOnDestroy","toFixed","totalPercentage","reduce","total","_prevType","barTypeClass","bgClass","removeClass","nativeElement","ElementRef","Renderer2","ProgressbarModule","forRoot","ngModule","providers","imports","common","CommonModule","declarations","exports","NgClass","NgComponentOutlet","NgForOf","NgIf","NgTemplateOutlet","NgStyle","NgSwitch","NgSwitchCase","NgSwitchDefault","NgPlural","NgPluralCase","AsyncPipe","UpperCasePipe","LowerCasePipe","JsonPipe","SlicePipe","DecimalPipe","PercentPipe","TitleCasePipe","CurrencyPipe","DatePipe","I18nPluralPipe","I18nSelectPipe","KeyValuePipe"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ProgressbarConfig {\n  /** if `true` changing value of progress bar will be animated */\n  animate: Boolean = false;\n  /** maximum total value of progress element */\n  max = 100;\n}\n","<bar [type]=\"type\" [value]=\"_value\" *ngIf=\"!isStacked\">\n  <ng-content></ng-content>\n</bar>\n<ng-template [ngIf]=\"isStacked\">\n  <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\">{{ item.label }}</bar>\n</ng-template>\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { ProgressbarType } from './progressbar-type.interface';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { BarComponent } from './bar.component';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  styles: [\n    `\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  `\n  ]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated */\n  @Input()\n  set animate(value: boolean) {\n    this._animate = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.animate = value;\n    });\n  }\n  /** If `true`, striped classes are applied */\n  @Input()\n  set striped(value: boolean) {\n    this._striped = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.striped = value;\n    });\n  }\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: ProgressbarType;\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  isStacked = false;\n  _striped: boolean;\n  _animate: boolean;\n  /* tslint:disable-next-line:no-any */\n  _value: number | any[];\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n\n  set max(v: number) {\n    this._max = v;\n    this.bars.forEach((bar: BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  bars: BarComponent[] = [];\n\n  protected _max = 100;\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n  addBar(bar: BarComponent): void {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n\n    this.bars.push(bar);\n  }\n\n  removeBar(bar: BarComponent): void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n","import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  max: number;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n\n  set type(v: string) {\n    this._type = v;\n    this.applyTypeClasses();\n  }\n\n  /** current value of progress bar */\n  @Input()\n  get value(): number {\n    return this._value;\n  }\n\n  set value(v: number) {\n    if (!v && v !== 0) {\n      return;\n    }\n    this._value = v;\n    this.recalculatePercentage();\n  }\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  @HostBinding('class.progress-bar') addClass = true;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  protected _value: number;\n  protected _type: string;\n  private _prevType: string;\n\n  constructor(\n    private el: ElementRef,\n    @Host() progress: ProgressbarComponent,\n    private renderer: Renderer2\n  ) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n\n  private applyTypeClasses(): void {\n    if (this._prevType) {\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = null;\n    }\n\n    if (this._type) {\n      const barTypeClass = `progress-bar-${this._type}`;\n      const bgClass = `bg-${this._type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this._type;\n    }\n  }\n}\n","<ng-content></ng-content>\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\nimport { ProgressbarComponent } from './progressbar.component';\nimport { ProgressbarConfig } from './progressbar.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BarComponent, ProgressbarComponent],\n  exports: [BarComponent, ProgressbarComponent]\n})\nexport class ProgressbarModule {\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\n    return { ngModule: ProgressbarModule, providers: [ProgressbarConfig] };\n  }\n}\n"]}