(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ngx-bootstrap/utils'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-bootstrap/progressbar', ['exports', '@angular/core', 'ngx-bootstrap/utils', '@angular/common'], factory) :
    (global = global || self, factory((global['ngx-bootstrap'] = global['ngx-bootstrap'] || {}, global['ngx-bootstrap'].progressbar = {}), global.ng.core, global.utils, global.ng.common));
}(this, (function (exports, core, utils, common) { 'use strict';

    var ProgressbarConfig = /** @class */ (function () {
        function ProgressbarConfig() {
            /** if `true` changing value of progress bar will be animated */
            this.animate = false;
            /** maximum total value of progress element */
            this.max = 100;
        }
        /** @nocollapse */ ProgressbarConfig.ɵfac = function ProgressbarConfig_Factory(t) { return new (t || ProgressbarConfig)(); };
        /** @nocollapse */ ProgressbarConfig.ɵprov = core["ɵɵdefineInjectable"]({ token: ProgressbarConfig, factory: ProgressbarConfig.ɵfac });
        return ProgressbarConfig;
    }());
    /*@__PURE__*/ (function () { core["ɵsetClassMetadata"](ProgressbarConfig, [{
            type: core.Injectable
        }], null, null); })();

    function ProgressbarComponent_bar_0_Template(rf, ctx) { if (rf & 1) {
        core["ɵɵelementStart"](0, "bar", 2);
        core["ɵɵprojection"](1);
        core["ɵɵelementEnd"]();
    } if (rf & 2) {
        var ctx_r4 = core["ɵɵnextContext"]();
        core["ɵɵproperty"]("type", ctx_r4.type)("value", ctx_r4._value);
    } }
    function ProgressbarComponent_ng_template_1_bar_0_Template(rf, ctx) { if (rf & 1) {
        core["ɵɵelementStart"](0, "bar", 2);
        core["ɵɵtext"](1);
        core["ɵɵelementEnd"]();
    } if (rf & 2) {
        var item_r7 = ctx.$implicit;
        core["ɵɵproperty"]("type", item_r7.type)("value", item_r7.value);
        core["ɵɵadvance"](1);
        core["ɵɵtextInterpolate"](item_r7.label);
    } }
    function ProgressbarComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
        core["ɵɵtemplate"](0, ProgressbarComponent_ng_template_1_bar_0_Template, 2, 3, "bar", 3);
    } if (rf & 2) {
        var ctx_r5 = core["ɵɵnextContext"]();
        core["ɵɵproperty"]("ngForOf", ctx_r5._value);
    } }
    var _c0 = ["*"];
    var ProgressbarComponent = /** @class */ (function () {
        function ProgressbarComponent(config) {
            this.isStacked = false;
            this.addClass = true;
            /* tslint:disable-next-line:no-any */
            this.bars = [];
            this._max = 100;
            Object.assign(this, config);
        }
        Object.defineProperty(ProgressbarComponent.prototype, "animate", {
            /** if `true` changing value of progress bar will be animated */
            set: function (value) {
                this._animate = value;
                this.bars.forEach(function (b) {
                    b.animate = value;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "striped", {
            /** If `true`, striped classes are applied */
            set: function (value) {
                this._striped = value;
                this.bars.forEach(function (b) {
                    b.striped = value;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "value", {
            /** current value of progress bar. Could be a number or array of objects
             * like {"value":15,"type":"info","label":"15 %"}
             */
            set: function (value) {
                this.isStacked = Array.isArray(value);
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "isBs3", {
            get: function () {
                return utils.isBs3();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressbarComponent.prototype, "max", {
            /** maximum total value of progress element */
            get: function () {
                return this._max;
            },
            set: function (v) {
                this._max = v;
                this.bars.forEach(function (bar) {
                    bar.recalculatePercentage();
                });
            },
            enumerable: true,
            configurable: true
        });
        ProgressbarComponent.prototype.addBar = function (bar) {
            bar.animate = this._animate;
            bar.striped = this._striped;
            this.bars.push(bar);
        };
        ProgressbarComponent.prototype.removeBar = function (bar) {
            this.bars.splice(this.bars.indexOf(bar), 1);
        };
        /** @nocollapse */ ProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) { return new (t || ProgressbarComponent)(core["ɵɵdirectiveInject"](ProgressbarConfig)); };
        /** @nocollapse */ ProgressbarComponent.ɵcmp = core["ɵɵdefineComponent"]({ type: ProgressbarComponent, selectors: [["progressbar"]], hostVars: 3, hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) { if (rf & 2) {
                core["ɵɵattribute"]("max", ctx.max);
                core["ɵɵclassProp"]("progress", ctx.addClass);
            } }, inputs: { animate: "animate", striped: "striped", type: "type", value: "value", max: "max" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[3, "type", "value", 4, "ngIf"], [3, "ngIf"], [3, "type", "value"], [3, "type", "value", 4, "ngFor", "ngForOf"]], template: function ProgressbarComponent_Template(rf, ctx) { if (rf & 1) {
                core["ɵɵprojectionDef"]();
                core["ɵɵtemplate"](0, ProgressbarComponent_bar_0_Template, 2, 2, "bar", 0);
                core["ɵɵtemplate"](1, ProgressbarComponent_ng_template_1_Template, 1, 1, "ng-template", 1);
            } if (rf & 2) {
                core["ɵɵproperty"]("ngIf", !ctx.isStacked);
                core["ɵɵadvance"](1);
                core["ɵɵproperty"]("ngIf", ctx.isStacked);
            } }, styles: ["[_nghost-%COMP%] {\n      width: 100%;\n      display: flex;\n    }"] });
        return ProgressbarComponent;
    }());
    /*@__PURE__*/ (function () { core["ɵsetClassMetadata"](ProgressbarComponent, [{
            type: core.Component,
            args: [{
                    selector: 'progressbar',
                    templateUrl: './progressbar.component.html',
                    styles: [
                        "\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  "
                    ]
                }]
        }], function () { return [{ type: ProgressbarConfig }]; }, { animate: [{
                type: core.Input
            }], striped: [{
                type: core.Input
            }], type: [{
                type: core.Input
            }], value: [{
                type: core.Input
            }], max: [{
                type: core.HostBinding,
                args: ['attr.max']
            }, {
                type: core.Input
            }], addClass: [{
                type: core.HostBinding,
                args: ['class.progress']
            }] }); })();

    var _c0$1 = ["*"];
    // todo: number pipe
    // todo: use query from progress?
    var BarComponent = /** @class */ (function () {
        function BarComponent(el, progress, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.addClass = true;
            this.percent = 0;
            this.progress = progress;
        }
        Object.defineProperty(BarComponent.prototype, "type", {
            /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */
            get: function () {
                return this._type;
            },
            set: function (v) {
                this._type = v;
                this.applyTypeClasses();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarComponent.prototype, "value", {
            /** current value of progress bar */
            get: function () {
                return this._value;
            },
            set: function (v) {
                if (!v && v !== 0) {
                    return;
                }
                this._value = v;
                this.recalculatePercentage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarComponent.prototype, "setBarWidth", {
            get: function () {
                this.recalculatePercentage();
                return this.percent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarComponent.prototype, "isBs3", {
            get: function () {
                return utils.isBs3();
            },
            enumerable: true,
            configurable: true
        });
        BarComponent.prototype.ngOnInit = function () {
            this.progress.addBar(this);
        };
        BarComponent.prototype.ngOnDestroy = function () {
            this.progress.removeBar(this);
        };
        BarComponent.prototype.recalculatePercentage = function () {
            this.percent = +(this.value / this.progress.max * 100).toFixed(2);
            var totalPercentage = this.progress.bars
                .reduce(function (total, bar) {
                return total + bar.percent;
            }, 0);
            if (totalPercentage > 100) {
                this.percent -= totalPercentage - 100;
            }
        };
        BarComponent.prototype.applyTypeClasses = function () {
            if (this._prevType) {
                var barTypeClass = "progress-bar-" + this._prevType;
                var bgClass = "bg-" + this._prevType;
                this.renderer.removeClass(this.el.nativeElement, barTypeClass);
                this.renderer.removeClass(this.el.nativeElement, bgClass);
                this._prevType = null;
            }
            if (this._type) {
                var barTypeClass = "progress-bar-" + this._type;
                var bgClass = "bg-" + this._type;
                this.renderer.addClass(this.el.nativeElement, barTypeClass);
                this.renderer.addClass(this.el.nativeElement, bgClass);
                this._prevType = this._type;
            }
        };
        /** @nocollapse */ BarComponent.ɵfac = function BarComponent_Factory(t) { return new (t || BarComponent)(core["ɵɵdirectiveInject"](core.ElementRef), core["ɵɵdirectiveInject"](ProgressbarComponent, 1), core["ɵɵdirectiveInject"](core.Renderer2)); };
        /** @nocollapse */ BarComponent.ɵcmp = core["ɵɵdefineComponent"]({ type: BarComponent, selectors: [["bar"]], hostAttrs: ["role", "progressbar", "aria-valuemin", "0"], hostVars: 15, hostBindings: function BarComponent_HostBindings(rf, ctx) { if (rf & 2) {
                core["ɵɵattribute"]("aria-valuenow", ctx.value)("aria-valuetext", ctx.percent ? ctx.percent.toFixed(0) + "%" : "")("aria-valuemax", ctx.max);
                core["ɵɵstyleProp"]("height", "100", "%")("width", ctx.setBarWidth, "%");
                core["ɵɵclassProp"]("progress-bar-animated", !ctx.isBs3 && ctx.animate)("progress-bar-striped", ctx.striped)("active", ctx.isBs3 && ctx.animate)("progress-bar", ctx.addClass);
            } }, inputs: { type: "type", value: "value" }, ngContentSelectors: _c0$1, decls: 1, vars: 0, template: function BarComponent_Template(rf, ctx) { if (rf & 1) {
                core["ɵɵprojectionDef"]();
                core["ɵɵprojection"](0);
            } }, encapsulation: 2 });
        return BarComponent;
    }());
    /*@__PURE__*/ (function () { core["ɵsetClassMetadata"](BarComponent, [{
            type: core.Component,
            args: [{
                    selector: 'bar',
                    templateUrl: './bar.component.html',
                    host: {
                        role: 'progressbar',
                        'aria-valuemin': '0',
                        '[class.progress-bar-animated]': '!isBs3 && animate',
                        '[class.progress-bar-striped]': 'striped',
                        '[class.active]': 'isBs3 && animate',
                        '[attr.aria-valuenow]': 'value',
                        '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + "%" : ""',
                        '[attr.aria-valuemax]': 'max',
                        '[style.height.%]': '"100"'
                    }
                }]
        }], function () { return [{ type: core.ElementRef }, { type: ProgressbarComponent, decorators: [{
                    type: core.Host
                }] }, { type: core.Renderer2 }]; }, { type: [{
                type: core.Input
            }], value: [{
                type: core.Input
            }], setBarWidth: [{
                type: core.HostBinding,
                args: ['style.width.%']
            }], addClass: [{
                type: core.HostBinding,
                args: ['class.progress-bar']
            }] }); })();

    var ProgressbarModule = /** @class */ (function () {
        function ProgressbarModule() {
        }
        ProgressbarModule.forRoot = function () {
            return { ngModule: ProgressbarModule, providers: [ProgressbarConfig] };
        };
        /** @nocollapse */ ProgressbarModule.ɵmod = core["ɵɵdefineNgModule"]({ type: ProgressbarModule });
        /** @nocollapse */ ProgressbarModule.ɵinj = core["ɵɵdefineInjector"]({ factory: function ProgressbarModule_Factory(t) { return new (t || ProgressbarModule)(); }, imports: [[common.CommonModule]] });
        return ProgressbarModule;
    }());
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && core["ɵɵsetNgModuleScope"](ProgressbarModule, { declarations: [BarComponent, ProgressbarComponent], imports: [common.CommonModule], exports: [BarComponent, ProgressbarComponent] }); })();
    /*@__PURE__*/ (function () { core["ɵsetClassMetadata"](ProgressbarModule, [{
            type: core.NgModule,
            args: [{
                    imports: [common.CommonModule],
                    declarations: [BarComponent, ProgressbarComponent],
                    exports: [BarComponent, ProgressbarComponent]
                }]
        }], null, null); })();
    core["ɵɵsetComponentScope"](ProgressbarComponent, [common.NgClass, common.NgComponentOutlet, common.NgForOf, common.NgIf, common.NgTemplateOutlet, common.NgStyle, common.NgSwitch, common.NgSwitchCase, common.NgSwitchDefault, common.NgPlural, common.NgPluralCase, BarComponent, ProgressbarComponent], [common.AsyncPipe, common.UpperCasePipe, common.LowerCasePipe, common.JsonPipe, common.SlicePipe, common.DecimalPipe, common.PercentPipe, common.TitleCasePipe, common.CurrencyPipe, common.DatePipe, common.I18nPluralPipe, common.I18nSelectPipe, common.KeyValuePipe]);

    exports.BarComponent = BarComponent;
    exports.ProgressbarComponent = ProgressbarComponent;
    exports.ProgressbarConfig = ProgressbarConfig;
    exports.ProgressbarModule = ProgressbarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-bootstrap-progressbar.umd.js.map
