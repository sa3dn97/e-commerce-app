import { Injectable, ElementRef, RendererFactory2, Inject, PLATFORM_ID, NgZone } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { positionElements } from './ng-positioning';
import { fromEvent, merge, of, animationFrameScheduler, Subject } from 'rxjs';
import * as i0 from "@angular/core";
var PositioningService = /** @class */ (function () {
    function PositioningService(ngZone, rendererFactory, platformId) {
        var _this = this;
        this.update$$ = new Subject();
        this.positionElements = new Map();
        this.isDisabled = false;
        if (isPlatformBrowser(platformId)) {
            ngZone.runOutsideAngular(function () {
                _this.triggerEvent$ = merge(fromEvent(window, 'scroll', { passive: true }), fromEvent(window, 'resize', { passive: true }), 
                /* tslint:disable-next-line: deprecation */
                of(0, animationFrameScheduler), _this.update$$);
                _this.triggerEvent$.subscribe(function () {
                    if (_this.isDisabled) {
                        return;
                    }
                    _this.positionElements
                        /* tslint:disable-next-line: no-any */
                        .forEach(function (positionElement) {
                        positionElements(_getHtmlElement(positionElement.target), _getHtmlElement(positionElement.element), positionElement.attachment, positionElement.appendToBody, _this.options, rendererFactory.createRenderer(null, null));
                    });
                });
            });
        }
    }
    PositioningService.prototype.position = function (options) {
        this.addPositionElement(options);
    };
    Object.defineProperty(PositioningService.prototype, "event$", {
        get: function () {
            return this.triggerEvent$;
        },
        enumerable: true,
        configurable: true
    });
    PositioningService.prototype.disable = function () {
        this.isDisabled = true;
    };
    PositioningService.prototype.enable = function () {
        this.isDisabled = false;
    };
    PositioningService.prototype.addPositionElement = function (options) {
        this.positionElements.set(_getHtmlElement(options.element), options);
    };
    PositioningService.prototype.calcPosition = function () {
        this.update$$.next();
    };
    PositioningService.prototype.deletePositionElement = function (elRef) {
        this.positionElements.delete(_getHtmlElement(elRef));
    };
    PositioningService.prototype.setOptions = function (options) {
        this.options = options;
    };
    /** @nocollapse */ PositioningService.ɵfac = function PositioningService_Factory(t) { return new (t || PositioningService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(PLATFORM_ID)); };
    /** @nocollapse */ PositioningService.ɵprov = i0.ɵɵdefineInjectable({ token: PositioningService, factory: PositioningService.ɵfac });
    return PositioningService;
}());
export { PositioningService };
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(PositioningService, [{
        type: Injectable
    }], function () { return [{ type: i0.NgZone }, { type: i0.RendererFactory2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
function _getHtmlElement(element) {
    // it means that we got a selector
    if (typeof element === 'string') {
        return document.querySelector(element);
    }
    if (element instanceof ElementRef) {
        return element.nativeElement;
    }
    return element;
}
//# sourceMappingURL=data:application/json;base64,