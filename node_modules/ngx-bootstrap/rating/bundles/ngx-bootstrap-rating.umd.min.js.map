{"version":3,"sources":["ng://ngx-bootstrap/rating/rating.config.ts","ng://ngx-bootstrap/rating/rating.component.html","ng://ngx-bootstrap/rating/rating.component.ts","ng://ngx-bootstrap/rating/rating.module.ts"],"names":["RatingConfig","this","ariaLabel","t","token","factory","ɵfac","i0.ɵɵtext","i0.ɵɵtextInterpolate","i0.ɵɵelementStart","i0.ɵɵelementEnd","i0.ɵɵlistener","core","_r20","index_r17","ctx","index","rate","i0.ɵɵtemplate","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","i0.ɵɵstyleProp","i0.ɵɵclassProp","i0.ɵɵproperty","_c0","ctx_r13","value","RATING_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RatingComponent","multi","changeDetection","config","max","onHover","EventEmitter","onLeave","onChange","Function","prototype","onTouched","Object","assign","onKeydown","event","indexOf","which","preventDefault","stopPropagation","sign","ngOnInit","titles","length","range","buildTemplateObjects","writeValue","Math","round","preValue","markForCheck","enter","readonly","emit","reset","registerOnChange","fn","registerOnTouched","result","i","push","title","ChangeDetectorRef","decls","vars","consts","template","rf","$event","i0.ɵɵattribute","RatingModule","forRoot","ngModule","providers","imports","common","CommonModule","declarations","exports"],"mappings":"idAGA,SAAAA,IAGEC,KAAAC,UAAY,mCAFD,OAAA,IAAAC,GAAAH,qCAAYI,MAAAJ,EAAAK,QAAAL,EAAAM,oCCCgCC,EAAAA,UAAAA,gCAAAC,EAAAA,qBAAAA,EAAAA,EAAAA,IAAAA,0HAErDC,EAAAA,kBAAAA,EAAAA,OAAAA,GAAsBF,EAAAA,UAAAA,GAAiCG,EAAAA,kBACvDD,EAAAA,kBAAAA,EAAAA,OAAAA,GACME,EAAAA,cAAAA,cAAAA,WAAAA,EAAAA,iBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAAA,mBAAAA,MAAAA,EAA4B,KAA5BA,CAA+B,SAAA,WAAAC,EAAA,iBAAAC,GAAA,IAAAC,EAAAC,EAAAC,MAAA,OAAAJ,EAAA,mBAAAK,KAAAH,EACT,MAI1BI,EAAAA,cAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,GAGFR,EAAAA,mGAVsBS,EAAAA,aAAAA,GAAAC,EAAAA,sBAAAA,IAAAA,EAAAA,EAAAA,MAAAA,IAAAA,IAAAA,KAKhBD,EAAAA,aAAAA,GAAAE,EAAAA,eAAAA,SAAAA,EAAAA,SAAAA,UAAAA,WACAC,EAAAA,eAAAA,SAAAA,EAAAA,EAAAA,OAFAC,EAAAA,cAAAA,QAAAA,EAAAA,OAGSJ,EAAAA,aAAAA,GAAAI,EAAAA,cAAAA,mBAAAA,EAAAA,gBAAAA,EAAAA,CAA2C,0BAAAX,EAAA,mBAAA,EAAAY,EAAAV,EAAAW,EAAAC,SCD9D,IAAaC,EAAiD,CAC5DC,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAkCP,SAAAD,EAAoBE,EACRC,GADQlC,KAAAiC,gBAAAA,EAvBXjC,KAAAmC,IAAM,EASLnC,KAAAoC,QAAgC,IAAIC,EAAAA,aAEpCrC,KAAAsC,QAAgC,IAAID,EAAAA,aAG9CrC,KAAAuC,SAAgBC,SAASC,UAEzBzC,KAAA0C,UAAiBF,SAASC,UASxBE,OAAOC,OAAO5C,KAAMkC,UAItBH,EAAAU,UAAAI,UADA,SACUC,GAER,IAA+C,IAA3C,CAAC,GAAI,GAAI,GAAI,IAAIC,QAAQD,EAAME,OAAnC,CAIAF,EAAMG,iBACNH,EAAMI,kBAEN,IAAMC,EAAuB,KAAhBL,EAAME,OAAgC,KAAhBF,EAAME,MAAe,GAAK,EAC7DhD,KAAKgB,KAAKhB,KAAKyB,MAAQ0B,KAGzBpB,EAAAU,UAAAW,SAAA,WACEpD,KAAKmC,SAA0B,IAAbnC,KAAKmC,IAAsBnC,KAAKmC,IAAM,EACxDnC,KAAKqD,YACoB,IAAhBrD,KAAKqD,QAA0BrD,KAAKqD,OAAOC,OAAS,EACvDtD,KAAKqD,OACL,GACNrD,KAAKuD,MAAQvD,KAAKwD,qBAAqBxD,KAAKmC,MAI9CJ,EAAAU,UAAAgB,WAAA,SAAWhC,GACT,GAAIA,EAAQ,IAAMA,EAKhB,OAJAzB,KAAKyB,MAAQiC,KAAKC,MAAMlC,GACxBzB,KAAK4D,SAAWnC,OAChBzB,KAAKiC,gBAAgB4B,eAKvB7D,KAAK4D,SAAWnC,EAChBzB,KAAKyB,MAAQA,EACbzB,KAAKiC,gBAAgB4B,gBAGvB9B,EAAAU,UAAAqB,MAAA,SAAMrC,GACCzB,KAAK+D,WACR/D,KAAKyB,MAAQA,EACbzB,KAAKiC,gBAAgB4B,eACrB7D,KAAKoC,QAAQ4B,KAAKvC,KAItBM,EAAAU,UAAAwB,MAAA,WACEjE,KAAKyB,MAAQiC,KAAKC,MAAM3D,KAAK4D,UAC7B5D,KAAKiC,gBAAgB4B,eACrB7D,KAAKsC,QAAQ0B,KAAKhE,KAAKyB,QAGzBM,EAAAU,UAAAyB,iBAAA,SAAiBC,GACfnE,KAAKuC,SAAW4B,GAGlBpC,EAAAU,UAAA2B,kBAAA,SAAkBD,GAChBnE,KAAK0C,UAAYyB,GAGnBpC,EAAAU,UAAAzB,KAAA,SAAKS,IACEzB,KAAK+D,UAAYtC,GAAS,GAAKA,GAASzB,KAAKuD,MAAMD,SACtDtD,KAAKyD,WAAWhC,GAChBzB,KAAKuC,SAASd,KAIRM,EAAAU,UAAAe,qBAAV,SAA+BrB,GAE7B,IADA,IAAMkC,EAA0B,GACvBC,EAAI,EAAGA,EAAInC,EAAKmC,IACvBD,EAAOE,KAAK,CACRxD,MAAOuD,EACPE,MAAOxE,KAAKqD,OAAOiB,IAAMA,EAAI,IAInC,OAAOD,sBA1GE,OAAA,IAAAnE,GAAe6B,GAAApB,EAAA,qBAAAA,EAAA8D,mBAAA9D,EAAA,qBAAAZ,0UAHf,CAAC2B,KAA8BgD,MAAA,EAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,WAAA,IAAA,OAAA,SAAA,gBAAA,IAAA,EAAA,aAAA,WAAA,CAAA,OAAA,IAAA,CAAA,QAAA,GAAA,EAAA,WAAA,CAAA,EAAA,WAAA,CAAA,EAAA,iBAAA,EAAA,QAAA,aAAA,SAAA,CAAA,EAAA,mBAAA,4BAAAC,SAAA,SAAAC,EAAAhE,GAAA,EAAAgE,IDvB5CtE,EAAAA,kBAAAA,EAAAA,OAAAA,GAAME,EAAAA,cAAAA,cAAAA,WAAAA,OAAcI,EAAAmD,UAAdvD,CAAsB,WAAA,SAAAqE,GAAA,OAAYjE,EAAA+B,UAAAkC,MAKtC9D,EAAAA,cAAAA,EAAAA,EAAAA,EAAAA,EAAAA,cAAAA,KAAAA,EAAAA,EAAAA,2BACAA,EAAAA,cAAAA,EAAAA,EAAAA,EAAAA,GAAAA,cAAAA,GAaFR,EAAAA,yBAjBMuE,EAAAA,eAAAA,aAAAA,EAAAA,UAAAA,CAA6B,gBAAAlE,EAAAyC,MAAAD,OAA7B0B,CAA6B,gBAAAlE,EAAAW,OAIRP,EAAAA,aAAAA,GAAAI,EAAAA,cAAAA,UAAAA,EAAAA,yGEA3B,SAAA2D,YAMSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CAACrF,8FAJL,OAAA,IAAAG,GAAA+E,IAJDI,QAAA,CAAA,CAAAC,EAAAC,0FAICN,EAAY,CAAAO,aAAA,CAHRzD,GAAesD,QAAA,CADpBE,EAAAA,cAAYE,QAAA,CAEZ1D","sourcesContent":["import { Injectable } from '@angular/core';\n\n/** Default values provider for rating */\n@Injectable()\nexport class RatingConfig {\n  /** aria label for rating */\n  ariaLabel = 'rating';\n}\n","<span (mouseleave)=\"reset()\" (keydown)=\"onKeydown($event)\" tabindex=\"0\"\n      role=\"slider\" aria-valuemin=\"0\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-valuemax]=\"range.length\"\n      [attr.aria-valuenow]=\"value\">\n  <ng-template #star let-value=\"value\" let-index=\"index\">{{ index < value ? '&#9733;' : '&#9734;' }}</ng-template>\n  <ng-template ngFor let-r [ngForOf]=\"range\" let-index=\"index\">\n    <span class=\"sr-only\">({{ index < value ? '*' : ' ' }})</span>\n    <span class=\"bs-rating-star\"\n          (mouseenter)=\"enter(index + 1)\"\n          (click)=\"rate(index + 1)\"\n          [title]=\"r.title\"\n          [style.cursor]=\"readonly ? 'default' : 'pointer'\"\n          [class.active]=\"index < value\">\n      <ng-template [ngTemplateOutlet]=\"customTemplate || star\"\n                   [ngTemplateOutletContext]=\"{index: index, value: value}\">\n      </ng-template>\n    </span>\n  </ng-template>\n</span>\n","import {\n  Component,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  forwardRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AccessorContent, RatingResults } from './models';\nimport { RatingConfig } from './rating.config';\n\nexport const RATING_CONTROL_VALUE_ACCESSOR: AccessorContent = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => RatingComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'rating',\n  templateUrl: './rating.component.html',\n  providers: [RATING_CONTROL_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RatingComponent implements ControlValueAccessor, OnInit {\n  /** number of icons */\n  @Input() max = 5;\n  /** if true will not react on any user events */\n  @Input() readonly: boolean;\n  /** array of icons titles, default: ([\"one\", \"two\", \"three\", \"four\", \"five\"]) */\n  @Input() titles: string[];\n  /** custom template for icons */\n  // tslint:disable-next-line:no-any\n  @Input() customTemplate: TemplateRef<any>;\n  /** fired when icon selected, $event:number equals to selected rating */\n  @Output() onHover: EventEmitter<number> = new EventEmitter();\n  /** fired when icon selected, $event:number equals to previous rating value */\n  @Output() onLeave: EventEmitter<number> = new EventEmitter();\n\n  // tslint:disable-next-line:no-any\n  onChange: any = Function.prototype;\n  // tslint:disable-next-line:no-any\n  onTouched: any = Function.prototype;\n  /** aria label for rating */\n  ariaLabel: string;\n  range: RatingResults[];\n  value: number;\n  protected preValue: number;\n\n  constructor(private changeDetection: ChangeDetectorRef,\n              config: RatingConfig) {\n    Object.assign(this, config);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeydown(event: KeyboardEvent): void {\n    /* tslint:disable-next-line: deprecation */\n    if ([37, 38, 39, 40].indexOf(event.which) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    /* tslint:disable-next-line: deprecation */\n    const sign = event.which === 38 || event.which === 39 ? 1 : -1;\n    this.rate(this.value + sign);\n  }\n\n  ngOnInit(): void {\n    this.max = typeof this.max !== 'undefined' ? this.max : 5;\n    this.titles =\n      typeof this.titles !== 'undefined' && this.titles.length > 0\n        ? this.titles\n        : [];\n    this.range = this.buildTemplateObjects(this.max);\n  }\n\n  // model -> view\n  writeValue(value: number): void {\n    if (value % 1 !== value) {\n      this.value = Math.round(value);\n      this.preValue = value;\n      this.changeDetection.markForCheck();\n\n      return;\n    }\n\n    this.preValue = value;\n    this.value = value;\n    this.changeDetection.markForCheck();\n  }\n\n  enter(value: number): void {\n    if (!this.readonly) {\n      this.value = value;\n      this.changeDetection.markForCheck();\n      this.onHover.emit(value);\n    }\n  }\n\n  reset(): void {\n    this.value = Math.round(this.preValue);\n    this.changeDetection.markForCheck();\n    this.onLeave.emit(this.value);\n  }\n\n  registerOnChange(fn: (_: number) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  rate(value: number): void {\n    if (!this.readonly && value >= 0 && value <= this.range.length) {\n      this.writeValue(value);\n      this.onChange(value);\n    }\n  }\n\n  protected buildTemplateObjects(max: number): RatingResults[] {\n    const result: RatingResults[] = [];\n    for (let i = 0; i < max; i++) {\n      result.push({\n          index: i,\n          title: this.titles[i] || i + 1\n        });\n    }\n\n    return result;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { RatingComponent } from './rating.component';\nimport { RatingConfig } from './rating.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [RatingComponent],\n  exports: [RatingComponent]\n})\nexport class RatingModule {\n  static forRoot(): ModuleWithProviders<RatingModule> {\n    return {\n      ngModule: RatingModule,\n      providers: [RatingConfig]\n    };\n  }\n}\n"]}