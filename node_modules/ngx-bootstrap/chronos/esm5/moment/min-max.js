// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
import { isArray, isDateValid } from '../utils/type-checks';
import { isAfter, isBefore } from '../utils/date-compare';
function pickBy(fn, dates) {
    var _dates;
    var _firstArg = dates[0];
    if (isArray(_firstArg) && dates.length === 1) {
        _dates = _firstArg;
    }
    else if (isArray(dates)) {
        _dates = dates;
    }
    if (!_dates || !_dates.length) {
        return new Date();
    }
    var res = _dates[0];
    for (var i = 1; i < _dates.length; ++i) {
        // if (!moments[i].isValid() || moments[i][fn](res)) {
        if (!isDateValid(_dates[i]) || fn.call(null, _dates[i], res)) {
            res = _dates[i];
        }
    }
    return res;
}
// TODO: Use [].sort instead?
export function min() {
    // const args = [].slice.call(arguments, 0);
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return pickBy(isBefore, args);
}
export function max() {
    // const args = [].slice.call(arguments, 0);
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return pickBy(isAfter, args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluLW1heC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ib290c3RyYXAvY2hyb25vcy8iLCJzb3VyY2VzIjpbIm1vbWVudC9taW4tbWF4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9FQUFvRTtBQUNwRSwwREFBMEQ7QUFDMUQsRUFBRTtBQUNGLHlFQUF5RTtBQUN6RSwrQ0FBK0M7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFELFNBQVMsTUFBTSxDQUFDLEVBQVksRUFBRSxLQUF3QjtJQUNwRCxJQUFJLE1BQWMsQ0FBQztJQUNuQixJQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsSUFBSSxPQUFPLENBQU8sU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDbEQsTUFBTSxHQUFHLFNBQVMsQ0FBQztLQUNwQjtTQUFNLElBQUksT0FBTyxDQUFPLEtBQUssQ0FBQyxFQUFFO1FBQy9CLE1BQU0sR0FBRyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUM3QixPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7S0FDbkI7SUFDRCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDdEMsc0RBQXNEO1FBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQzVELEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7S0FDRjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELDZCQUE2QjtBQUM3QixNQUFNLFVBQVUsR0FBRztJQUNqQiw0Q0FBNEM7SUFEMUIsY0FBZTtTQUFmLFVBQWUsRUFBZixxQkFBZSxFQUFmLElBQWU7UUFBZix5QkFBZTs7SUFHakMsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsR0FBRztJQUNqQiw0Q0FBNEM7SUFEMUIsY0FBZTtTQUFmLFVBQWUsRUFBZixxQkFBZSxFQUFmLElBQWU7UUFBZix5QkFBZTs7SUFHakMsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5pbXBvcnQgeyBpc0FycmF5LCBpc0RhdGVWYWxpZCB9IGZyb20gJy4uL3V0aWxzL3R5cGUtY2hlY2tzJztcbmltcG9ydCB7IGlzQWZ0ZXIsIGlzQmVmb3JlIH0gZnJvbSAnLi4vdXRpbHMvZGF0ZS1jb21wYXJlJztcblxuZnVuY3Rpb24gcGlja0J5KGZuOiBGdW5jdGlvbiwgZGF0ZXM6IERhdGVbXSB8IERhdGVbXVtdKTogRGF0ZSB7XG4gIGxldCBfZGF0ZXM6IERhdGVbXTtcbiAgY29uc3QgX2ZpcnN0QXJnID0gZGF0ZXNbMF07XG4gIGlmIChpc0FycmF5PERhdGU+KF9maXJzdEFyZykgJiYgZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgX2RhdGVzID0gX2ZpcnN0QXJnO1xuICB9IGVsc2UgaWYgKGlzQXJyYXk8RGF0ZT4oZGF0ZXMpKSB7XG4gICAgX2RhdGVzID0gZGF0ZXM7XG4gIH1cblxuICBpZiAoIV9kYXRlcyB8fCAhX2RhdGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpO1xuICB9XG4gIGxldCByZXMgPSBfZGF0ZXNbMF07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgX2RhdGVzLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgaWYgKCFpc0RhdGVWYWxpZChfZGF0ZXNbaV0pIHx8IGZuLmNhbGwobnVsbCwgX2RhdGVzW2ldLCByZXMpKSB7XG4gICAgICByZXMgPSBfZGF0ZXNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbmV4cG9ydCBmdW5jdGlvbiBtaW4oLi4uYXJnczogRGF0ZVtdKTogRGF0ZSB7XG4gIC8vIGNvbnN0IGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgcmV0dXJuIHBpY2tCeShpc0JlZm9yZSwgYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgoLi4uYXJnczogRGF0ZVtdKTogRGF0ZSB7XG4gIC8vIGNvbnN0IGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgcmV0dXJuIHBpY2tCeShpc0FmdGVyLCBhcmdzKTtcbn1cbiJdfQ==