{"version":3,"file":"ngx-bootstrap-buttons.js","sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts","ng://ngx-bootstrap/buttons/ngx-bootstrap-buttons.ts"],"sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: boolean | string;\n  protected isDisabled: boolean;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Provider,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: string;\n  /** If `true` â radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: null | string) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` â radio button is disabled */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  private _value:  null | string;\n  private _disabled: boolean;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Optional() private group: ButtonRadioGroupDirective,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  _onChange(value: string): void {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective)) radioButtons: QueryList<ButtonRadioDirective>;\n\n  get value() {\n    return this._value;\n  }\n  set value(value: string | null) {\n    this._value = value;\n  }\n\n  private _value: string | null;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: string | null): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":";;;AAAA;AAYA;AACO,IAAM,+BAA+B,GAAa;IACvD,OAAO,EAAE,iBAAiB;;IAE1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,uBAAuB,GAAA,CAAC;IACtD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;IAGA;;QAMW,oBAAe,GAAG,IAAI,CAAC;;QAEvB,qBAAgB,GAAG,KAAK,CAAC;QAIlC,UAAK,GAAG,KAAK,CAAC;QAKJ,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;QAC9B,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;KAoD1C;;IAhDC,yCAAO,GADP;QAEE,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;SACR;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3B;IAED,0CAAQ,GAAR;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5C;IAED,sBAAc,8CAAS;aAAvB;YACE,OAAO,OAAO,IAAI,CAAC,eAAe,KAAK,WAAW;kBAC9C,IAAI,CAAC,eAAe;kBACpB,IAAI,CAAC;SACV;;;OAAA;IAED,sBAAc,+CAAU;aAAxB;YACE,OAAO,OAAO,IAAI,CAAC,gBAAgB,KAAK,WAAW;kBAC/C,IAAI,CAAC,gBAAgB;kBACrB,KAAK,CAAC;SACX;;;OAAA;IAED,wCAAM,GAAN,UAAO,KAAc;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;KAC5D;;;IAID,4CAAU,GAAV,UAAW,KAA8B;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;KACvD;IAED,kDAAgB,GAAhB,UAAiB,UAAmB;QAClC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAC9B;IAED,kDAAgB,GAAhB,UAAiB,EAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAED,mDAAiB,GAAjB,UAAkB,EAAY;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;kGAjEU;;;;;;iIAFA,CAAC,+BAA+B,CAAC;kCAzB9C;CAuBA,IAsEC;+CAlEY,uBAAuB;cAJnC,SAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;kBAGE,KAAK;;kBAEL,KAAK;;kBAEL,WAAW;mBAAC,cAAc;;kBAC1B,WAAW;mBAAC,mBAAmB;;kBAU/B,YAAY;mBAAC,OAAO;;;AC5BhB,IAAM,4BAA4B,GAAa;IACpD,OAAO,EAAE,iBAAiB;;IAE1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,oBAAoB,GAAA,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;AAIA;IA4CE,8BACU,EAAc,EACd,GAAsB,EACV,KAAgC,EAC5C,QAAmB;QAHnB,OAAE,GAAF,EAAE,CAAY;QACd,QAAG,GAAH,GAAG,CAAmB;QACV,UAAK,GAAL,KAAK,CAA2B;QAC5C,aAAQ,GAAR,QAAQ,CAAW;QA3C7B,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;QAC9B,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;KA2C3B;IApCJ,sBAAa,uCAAK;;aAAlB;YACE,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;SACpD;aAED,UAAU,KAAoB;YAC5B,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;gBAEzB,OAAO;aACR;YACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;;;OATA;IAWD,sBAAa,0CAAQ;;aAArB;YACE,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;aAED,UAAa,QAAiB;YAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;SACjC;;;OALA;IAOD,sBAEI,0CAAQ;aAFZ;YAGE,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC;SACrC;;;OAAA;IAaD,sCAAO,GADP;QAEE,IAAI,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;YAClG,OAAO;SACR;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC1F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5B;IAED,uCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,GAAG,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC;KAC5D;IAED,qCAAM,GAAN;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAED,wCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE3B,OAAO;SACR;QACD,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACtB;;;IAID,yCAAU,GAAV,UAAW,KAAa;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;KACzB;IAED,+CAAgB,GAAhB,UAAiB,EAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAED,gDAAiB,GAAjB,UAAkB,EAAY;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;IAED,+CAAgB,GAAhB,UAAiB,QAAiB;QAChC,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YAE1E,OAAO;SACR;QACD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;KAClE;4FAlGU;;;;;;+IAFA,CAAC,4BAA4B,CAAC;+BA7B3C;CA2BA,IAuGC;+CAnGY,oBAAoB;cAJhC,SAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;sBA4CI,QAAQ;;kBAtCV,KAAK;;kBAEL,KAAK;;kBAEL,KAAK;;kBAaL,KAAK;;kBASL,WAAW;mBAAC,cAAc;;kBAC1B,WAAW;mBAAC,mBAAmB;;kBAe/B,YAAY;mBAAC,OAAO;;;AClEhB,IAAMA,8BAA4B,GAAa;IACpD,OAAO,EAAE,iBAAiB;;IAE1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,yBAAyB,GAAA,CAAC;IACxD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;;AAIA;IAmBE,mCAAoB,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAd1C,aAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC;QAC9B,cAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;KAae;IAT9C,sBAAI,4CAAK;aAAT;YACE,OAAO,IAAI,CAAC,MAAM,CAAC;SACpB;aACD,UAAU,KAAoB;YAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;;;OAHA;IASD,8CAAU,GAAV,UAAW,KAAoB;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;KACzB;IAED,oDAAgB,GAAhB,UAAiB,EAAY;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAED,qDAAiB,GAAjB,UAAkB,EAAY;QAC5B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACrB;IAED,oDAAgB,GAAhB,UAAiB,QAAiB;QAChC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,OAAO;gBAC/B,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACpC,CAAC,CAAC;SACJ;KACF;sGApCU;;qCAIuB,oBAAoB;;;;2CAN3C,CAACA,8BAA4B,CAAC;oCAzB3C;CAuBA,IAyCC;+CArCY,yBAAyB;cAJrC,SAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,SAAS,EAAE,CAACA,8BAA4B,CAAC;aAC1C;;kBAKE,eAAe;mBAAC,UAAU,CAAC,cAAM,OAAA,oBAAoB,GAAA,CAAC;;;;ICzBzD;KAQC;IAHQ,qBAAO,GAAd;QACE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;KACnD;+DAHuB;0GAAb;wBAVb;CAMA,IAQC;qFAJY,aAAa,mBAHT,uBAAuB,EAAE,oBAAoB,EAAE,yBAAyB,aAC7E,uBAAuB,EAAE,oBAAoB,EAAE,yBAAyB;+CAEvE,aAAa;cAJzB,QAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,uBAAuB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC;gBACxF,OAAO,EAAE,CAAC,uBAAuB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC;aACpF;;;ACTD;;GAEG;;;;"}