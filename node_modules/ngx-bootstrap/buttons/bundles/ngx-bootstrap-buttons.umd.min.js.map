{"version":3,"sources":["ng://ngx-bootstrap/buttons/button-checkbox.directive.ts","ng://ngx-bootstrap/buttons/button-radio.directive.ts","ng://ngx-bootstrap/buttons/button-radio-group.directive.ts","ng://ngx-bootstrap/buttons/buttons.module.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","this","btnCheckboxTrue","btnCheckboxFalse","state","onChange","Function","prototype","onTouched","onClick","isDisabled","toggle","value","ngOnInit","trueValue","Object","defineProperty","falseValue","writeValue","setDisabledState","registerOnChange","fn","registerOnTouched","t","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","group","renderer","_value","_disabled","disabled","btnRadio","nativeElement","attributes","uncheckable","undefined","_onChange","onBlur","markForCheck","setAttribute","removeAttribute","core","ElementRef","ChangeDetectorRef","ButtonRadioGroupDirective","Renderer2","radioButtons","forEach","buttons","ButtonsModule","forRoot","ngModule","providers","type","declarations","exports"],"mappings":"uYAaO,IAAMA,EAA4C,CACvDC,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAMT,SAAAD,IAMWE,KAAAC,iBAAkB,EAElBD,KAAAE,kBAAmB,EAI5BF,KAAAG,OAAQ,EAKEH,KAAAI,SAAWC,SAASC,UACpBN,KAAAO,UAAYF,SAASC,iBAI/BR,EAAAQ,UAAAE,QADA,WAEMR,KAAKS,aAITT,KAAKU,QAAQV,KAAKG,OAClBH,KAAKI,SAASJ,KAAKW,SAGrBb,EAAAQ,UAAAM,SAAA,WACEZ,KAAKU,OAAOV,KAAKa,YAAcb,KAAKW,QAGtCG,OAAAC,eAAcjB,EAAAQ,UAAA,YAAS,KAAvB,WACE,YAAuC,IAAzBN,KAAKC,iBACfD,KAAKC,iDAIXa,OAAAC,eAAcjB,EAAAQ,UAAA,aAAU,KAAxB,WACE,YAAwC,IAA1BN,KAAKE,kBACfF,KAAKE,kDAIXJ,EAAAQ,UAAAI,OAAA,SAAOP,GACLH,KAAKG,MAAQA,EACbH,KAAKW,MAAQX,KAAKG,MAAQH,KAAKa,UAAYb,KAAKgB,YAKlDlB,EAAAQ,UAAAW,WAAA,SAAWN,GACTX,KAAKG,MAAQH,KAAKa,YAAcF,EAChCX,KAAKW,MAAQA,EAAQX,KAAKa,UAAYb,KAAKgB,YAG7ClB,EAAAQ,UAAAY,iBAAA,SAAiBT,GACfT,KAAKS,WAAaA,GAGpBX,EAAAQ,UAAAa,iBAAA,SAAiBC,GACfpB,KAAKI,SAAWgB,GAGlBtB,EAAAQ,UAAAe,kBAAA,SAAkBD,GAChBpB,KAAKO,UAAYa,sBAhER,OAAA,IAAAE,GAAAxB,sXAFA,CAACL,YCTD8B,EAAyC,CACpD7B,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,YAAW,WAAM,OAAA2B,KAC9BzB,OAAO,gBAmDP,SAAAyB,EACUC,EACAC,EACYC,EACZC,GAHA5B,KAAAyB,GAAAA,EACAzB,KAAA0B,IAAAA,EACY1B,KAAA2B,MAAAA,EACZ3B,KAAA4B,SAAAA,EA3CV5B,KAAAI,SAAWC,SAASC,UACpBN,KAAAO,UAAYF,SAASC,iBAOrBQ,OAAAC,eAAaS,EAAAlB,UAAA,QAAK,KAAlB,WACE,OAAON,KAAK2B,MAAQ3B,KAAK2B,MAAMhB,MAAQX,KAAK6B,YAG9C,SAAUlB,GACJX,KAAK2B,MACP3B,KAAK2B,MAAMhB,MAAQA,EAIrBX,KAAK6B,OAASlB,mCAGhBG,OAAAC,eAAaS,EAAAlB,UAAA,WAAQ,KAArB,WACE,OAAON,KAAK8B,eAGd,SAAaC,GACX/B,KAAK8B,UAAYC,EACjB/B,KAAKkB,iBAAiBa,oCAGxBjB,OAAAC,eAEIS,EAAAlB,UAAA,WAAQ,KAFZ,WAGE,OAAON,KAAKgC,WAAahC,KAAKW,uCAchCa,EAAAlB,UAAAE,QADA,WAEMR,KAAKyB,GAAGQ,cAAcC,WAAWH,WAAa/B,KAAKmC,aAAenC,KAAKgC,WAAahC,KAAKW,QAI7FX,KAAKW,MAAQX,KAAKmC,aAAenC,KAAKgC,WAAahC,KAAKW,WAAQyB,EAAYpC,KAAKgC,SACjFhC,KAAKqC,UAAUrC,KAAKW,SAGtBa,EAAAlB,UAAAM,SAAA,WACEZ,KAAKmC,iBAA0C,IAArBnC,KAAKmC,aAGjCX,EAAAlB,UAAAgC,OAAA,WACEtC,KAAKO,aAGPiB,EAAAlB,UAAA+B,UAAA,SAAU1B,GACR,GAAIX,KAAK2B,MAIP,OAHA3B,KAAK2B,MAAMpB,iBACXP,KAAK2B,MAAMvB,SAASO,GAItBX,KAAKO,YACLP,KAAKI,SAASO,IAKhBa,EAAAlB,UAAAW,WAAA,SAAWN,GACTX,KAAKW,MAAQA,EACbX,KAAK0B,IAAIa,gBAGXf,EAAAlB,UAAAa,iBAAA,SAAiBC,GACfpB,KAAKI,SAAWgB,GAGlBI,EAAAlB,UAAAe,kBAAA,SAAkBD,GAChBpB,KAAKO,UAAYa,GAGnBI,EAAAlB,UAAAY,iBAAA,SAAiBa,GACXA,EACF/B,KAAK4B,SAASY,aAAaxC,KAAKyB,GAAGQ,cAAe,WAAY,YAIhEjC,KAAK4B,SAASa,gBAAgBzC,KAAKyB,GAAGQ,cAAe,gCAjG5C,OAAA,IAAAX,GAAAE,GAAAkB,EAAA,qBAAAA,EAAAC,YAAAD,EAAA,qBAAAA,EAAAE,mBAAAF,EAAA,qBAAAG,EAAA,GAAAH,EAAA,qBAAAA,EAAAI,4YAFA,CAACvB,YCjBDA,EAAyC,CACpD7B,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,YAAW,WAAM,OAAAgD,KAC9B9C,OAAO,gBA0BP,SAAA8C,EAAoBnB,GAAA1B,KAAA0B,IAAAA,EAdpB1B,KAAAI,SAAWC,SAASC,UACpBN,KAAAO,UAAYF,SAASC,iBAIrBQ,OAAAC,eAAI8B,EAAAvC,UAAA,QAAK,KAAT,WACE,OAAON,KAAK6B,YAEd,SAAUlB,GACRX,KAAK6B,OAASlB,mCAOhBkC,EAAAvC,UAAAW,WAAA,SAAWN,GACTX,KAAK6B,OAASlB,EACdX,KAAK0B,IAAIa,gBAGXM,EAAAvC,UAAAa,iBAAA,SAAiBC,GACfpB,KAAKI,SAAWgB,GAGlByB,EAAAvC,UAAAe,kBAAA,SAAkBD,GAChBpB,KAAKO,UAAYa,GAGnByB,EAAAvC,UAAAY,iBAAA,SAAiBa,GACX/B,KAAK+C,cACP/C,KAAK+C,aAAaC,SAAQ,SAAAC,GACxBA,EAAQ/B,iBAAiBa,0BAjCpB,OAAA,IAAAT,GAAAuB,GAAAH,EAAA,qBAAAA,EAAAE,gKAIuBpB,GAAoB,4GAN3C,CAACD,yBCnBd,SAAA2B,YAKSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAeG,UAAW,mCAFvBC,KAAAJ,sDAAb,OAAA,IAAA5B,GAAA4B,+EAAAA,EAAa,CAAAK,aAAA,CAHTzD,EAAyB0B,EAAsBqB,GAAyBW,QAAA,CAC7E1D,EAAyB0B,EAAsBqB","sourcesContent":["// tslint:disable:no-use-before-declare\nimport {\n  Directive,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Provider\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n// TODO: config: activeClass - Class to apply to the checked buttons\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n\n/**\n * Add checkbox functionality to any element\n */\n@Directive({\n  selector: '[btnCheckbox]',\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\n  /** Truthy value, will be set to ngModel */\n  @Input() btnCheckboxTrue = true;\n  /** Falsy value, will be set to ngModel */\n  @Input() btnCheckboxFalse = false;\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  state = false;\n\n  protected value: boolean | string;\n  protected isDisabled: boolean;\n\n  protected onChange = Function.prototype;\n  protected onTouched = Function.prototype;\n\n  // view -> model\n  @HostListener('click')\n  onClick(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.toggle(!this.state);\n    this.onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.toggle(this.trueValue === this.value);\n  }\n\n  protected get trueValue(): boolean {\n    return typeof this.btnCheckboxTrue !== 'undefined'\n      ? this.btnCheckboxTrue\n      : true;\n  }\n\n  protected get falseValue(): boolean {\n    return typeof this.btnCheckboxFalse !== 'undefined'\n      ? this.btnCheckboxFalse\n      : false;\n  }\n\n  toggle(state: boolean): void {\n    this.state = state;\n    this.value = this.state ? this.trueValue : this.falseValue;\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: boolean | string | null): void {\n    this.state = this.trueValue === value;\n    this.value = value ? this.trueValue : this.falseValue;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Provider,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadio]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() btnRadio: string;\n  /** If `true` â radio button can be unchecked */\n  @Input() uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() get value() {\n    return this.group ? this.group.value : this._value;\n  }\n\n  set value(value: null | string) {\n    if (this.group) {\n      this.group.value = value;\n\n      return;\n    }\n    this._value = value;\n  }\n  /** If `true` â radio button is disabled */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n    this.setDisabledState(disabled);\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-pressed')\n  get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  private _value:  null | string;\n  private _disabled: boolean;\n\n  constructor(\n    private el: ElementRef,\n    private cdr: ChangeDetectorRef,\n    @Optional() private group: ButtonRadioGroupDirective,\n    private renderer: Renderer2\n  ) {}\n\n  @HostListener('click')\n  onClick(): void {\n    if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n      return;\n    }\n\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n    this._onChange(this.value);\n  }\n\n  ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  _onChange(value: string): void {\n    if (this.group) {\n      this.group.onTouched();\n      this.group.onChange(value);\n\n      return;\n    }\n    this.onTouched();\n    this.onChange(value);\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  writeValue(value: string): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (disabled) {\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n\n      return;\n    }\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Provider,\n  QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ButtonRadioDirective } from './button-radio.directive';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({\n  selector: '[btnRadioGroup]',\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n})\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\n  onChange = Function.prototype;\n  onTouched = Function.prototype;\n\n  @ContentChildren(forwardRef(() => ButtonRadioDirective)) radioButtons: QueryList<ButtonRadioDirective>;\n\n  get value() {\n    return this._value;\n  }\n  set value(value: string | null) {\n    this._value = value;\n  }\n\n  private _value: string | null;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  writeValue(value: string | null): void {\n    this._value = value;\n    this.cdr.markForCheck();\n  }\n\n  registerOnChange(fn: () => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    if (this.radioButtons) {\n      this.radioButtons.forEach(buttons => {\n        buttons.setDisabledState(disabled);\n      });\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\nimport { ButtonRadioDirective } from './button-radio.directive';\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\n\n@NgModule({\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n})\nexport class ButtonsModule {\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\n    return { ngModule: ButtonsModule, providers: [] };\n  }\n}\n"]}